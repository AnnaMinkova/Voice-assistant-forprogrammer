// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voice-assistant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_voice_2dassistant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_voice_2dassistant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_voice_2dassistant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_voice_2dassistant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voice_2dassistant_2eproto;
namespace voice {
namespace assistant {
class Clone;
class CloneDefaultTypeInternal;
extern CloneDefaultTypeInternal _Clone_default_instance_;
class Intents;
class IntentsDefaultTypeInternal;
extern IntentsDefaultTypeInternal _Intents_default_instance_;
class Nlu;
class NluDefaultTypeInternal;
extern NluDefaultTypeInternal _Nlu_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Slots;
class SlotsDefaultTypeInternal;
extern SlotsDefaultTypeInternal _Slots_default_instance_;
class What;
class WhatDefaultTypeInternal;
extern WhatDefaultTypeInternal _What_default_instance_;
class Which;
class WhichDefaultTypeInternal;
extern WhichDefaultTypeInternal _Which_default_instance_;
}  // namespace assistant
}  // namespace voice
PROTOBUF_NAMESPACE_OPEN
template<> ::voice::assistant::Clone* Arena::CreateMaybeMessage<::voice::assistant::Clone>(Arena*);
template<> ::voice::assistant::Intents* Arena::CreateMaybeMessage<::voice::assistant::Intents>(Arena*);
template<> ::voice::assistant::Nlu* Arena::CreateMaybeMessage<::voice::assistant::Nlu>(Arena*);
template<> ::voice::assistant::Request* Arena::CreateMaybeMessage<::voice::assistant::Request>(Arena*);
template<> ::voice::assistant::Response* Arena::CreateMaybeMessage<::voice::assistant::Response>(Arena*);
template<> ::voice::assistant::Slots* Arena::CreateMaybeMessage<::voice::assistant::Slots>(Arena*);
template<> ::voice::assistant::What* Arena::CreateMaybeMessage<::voice::assistant::What>(Arena*);
template<> ::voice::assistant::Which* Arena::CreateMaybeMessage<::voice::assistant::Which>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace voice {
namespace assistant {

// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kNluFieldNumber = 2,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // .voice.assistant.Nlu nlu = 2;
  bool has_nlu() const;
  private:
  bool _internal_has_nlu() const;
  public:
  void clear_nlu();
  const ::voice::assistant::Nlu& nlu() const;
  ::voice::assistant::Nlu* release_nlu();
  ::voice::assistant::Nlu* mutable_nlu();
  void set_allocated_nlu(::voice::assistant::Nlu* nlu);
  private:
  const ::voice::assistant::Nlu& _internal_nlu() const;
  ::voice::assistant::Nlu* _internal_mutable_nlu();
  public:
  void unsafe_arena_set_allocated_nlu(
      ::voice::assistant::Nlu* nlu);
  ::voice::assistant::Nlu* unsafe_arena_release_nlu();

  // @@protoc_insertion_point(class_scope:voice.assistant.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::voice::assistant::Nlu* nlu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// -------------------------------------------------------------------

class Nlu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.Nlu) */ {
 public:
  inline Nlu() : Nlu(nullptr) {};
  virtual ~Nlu();

  Nlu(const Nlu& from);
  Nlu(Nlu&& from) noexcept
    : Nlu() {
    *this = ::std::move(from);
  }

  inline Nlu& operator=(const Nlu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nlu& operator=(Nlu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nlu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nlu* internal_default_instance() {
    return reinterpret_cast<const Nlu*>(
               &_Nlu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Nlu& a, Nlu& b) {
    a.Swap(&b);
  }
  inline void Swap(Nlu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nlu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nlu* New() const final {
    return CreateMaybeMessage<Nlu>(nullptr);
  }

  Nlu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nlu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nlu& from);
  void MergeFrom(const Nlu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nlu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.Nlu";
  }
  protected:
  explicit Nlu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentsFieldNumber = 1,
  };
  // .voice.assistant.Intents intents = 1;
  bool has_intents() const;
  private:
  bool _internal_has_intents() const;
  public:
  void clear_intents();
  const ::voice::assistant::Intents& intents() const;
  ::voice::assistant::Intents* release_intents();
  ::voice::assistant::Intents* mutable_intents();
  void set_allocated_intents(::voice::assistant::Intents* intents);
  private:
  const ::voice::assistant::Intents& _internal_intents() const;
  ::voice::assistant::Intents* _internal_mutable_intents();
  public:
  void unsafe_arena_set_allocated_intents(
      ::voice::assistant::Intents* intents);
  ::voice::assistant::Intents* unsafe_arena_release_intents();

  // @@protoc_insertion_point(class_scope:voice.assistant.Nlu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::voice::assistant::Intents* intents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// -------------------------------------------------------------------

class Intents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.Intents) */ {
 public:
  inline Intents() : Intents(nullptr) {};
  virtual ~Intents();

  Intents(const Intents& from);
  Intents(Intents&& from) noexcept
    : Intents() {
    *this = ::std::move(from);
  }

  inline Intents& operator=(const Intents& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intents& operator=(Intents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Intents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intents* internal_default_instance() {
    return reinterpret_cast<const Intents*>(
               &_Intents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Intents& a, Intents& b) {
    a.Swap(&b);
  }
  inline void Swap(Intents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Intents* New() const final {
    return CreateMaybeMessage<Intents>(nullptr);
  }

  Intents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Intents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Intents& from);
  void MergeFrom(const Intents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.Intents";
  }
  protected:
  explicit Intents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloneFieldNumber = 1,
  };
  // .voice.assistant.Clone clone = 1;
  bool has_clone() const;
  private:
  bool _internal_has_clone() const;
  public:
  void clear_clone();
  const ::voice::assistant::Clone& clone() const;
  ::voice::assistant::Clone* release_clone();
  ::voice::assistant::Clone* mutable_clone();
  void set_allocated_clone(::voice::assistant::Clone* clone);
  private:
  const ::voice::assistant::Clone& _internal_clone() const;
  ::voice::assistant::Clone* _internal_mutable_clone();
  public:
  void unsafe_arena_set_allocated_clone(
      ::voice::assistant::Clone* clone);
  ::voice::assistant::Clone* unsafe_arena_release_clone();

  // @@protoc_insertion_point(class_scope:voice.assistant.Intents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::voice::assistant::Clone* clone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// -------------------------------------------------------------------

class Clone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.Clone) */ {
 public:
  inline Clone() : Clone(nullptr) {};
  virtual ~Clone();

  Clone(const Clone& from);
  Clone(Clone&& from) noexcept
    : Clone() {
    *this = ::std::move(from);
  }

  inline Clone& operator=(const Clone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clone& operator=(Clone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clone* internal_default_instance() {
    return reinterpret_cast<const Clone*>(
               &_Clone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Clone& a, Clone& b) {
    a.Swap(&b);
  }
  inline void Swap(Clone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Clone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clone* New() const final {
    return CreateMaybeMessage<Clone>(nullptr);
  }

  Clone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clone& from);
  void MergeFrom(const Clone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.Clone";
  }
  protected:
  explicit Clone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 1,
  };
  // .voice.assistant.Slots slots = 1;
  bool has_slots() const;
  private:
  bool _internal_has_slots() const;
  public:
  void clear_slots();
  const ::voice::assistant::Slots& slots() const;
  ::voice::assistant::Slots* release_slots();
  ::voice::assistant::Slots* mutable_slots();
  void set_allocated_slots(::voice::assistant::Slots* slots);
  private:
  const ::voice::assistant::Slots& _internal_slots() const;
  ::voice::assistant::Slots* _internal_mutable_slots();
  public:
  void unsafe_arena_set_allocated_slots(
      ::voice::assistant::Slots* slots);
  ::voice::assistant::Slots* unsafe_arena_release_slots();

  // @@protoc_insertion_point(class_scope:voice.assistant.Clone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::voice::assistant::Slots* slots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// -------------------------------------------------------------------

class Slots PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.Slots) */ {
 public:
  inline Slots() : Slots(nullptr) {};
  virtual ~Slots();

  Slots(const Slots& from);
  Slots(Slots&& from) noexcept
    : Slots() {
    *this = ::std::move(from);
  }

  inline Slots& operator=(const Slots& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slots& operator=(Slots&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slots& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slots* internal_default_instance() {
    return reinterpret_cast<const Slots*>(
               &_Slots_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Slots& a, Slots& b) {
    a.Swap(&b);
  }
  inline void Swap(Slots* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slots* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slots* New() const final {
    return CreateMaybeMessage<Slots>(nullptr);
  }

  Slots* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slots>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slots& from);
  void MergeFrom(const Slots& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slots* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.Slots";
  }
  protected:
  explicit Slots(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhatFieldNumber = 1,
    kWhichFieldNumber = 2,
  };
  // .voice.assistant.What what = 1;
  bool has_what() const;
  private:
  bool _internal_has_what() const;
  public:
  void clear_what();
  const ::voice::assistant::What& what() const;
  ::voice::assistant::What* release_what();
  ::voice::assistant::What* mutable_what();
  void set_allocated_what(::voice::assistant::What* what);
  private:
  const ::voice::assistant::What& _internal_what() const;
  ::voice::assistant::What* _internal_mutable_what();
  public:
  void unsafe_arena_set_allocated_what(
      ::voice::assistant::What* what);
  ::voice::assistant::What* unsafe_arena_release_what();

  // .voice.assistant.Which which = 2;
  bool has_which() const;
  private:
  bool _internal_has_which() const;
  public:
  void clear_which();
  const ::voice::assistant::Which& which() const;
  ::voice::assistant::Which* release_which();
  ::voice::assistant::Which* mutable_which();
  void set_allocated_which(::voice::assistant::Which* which);
  private:
  const ::voice::assistant::Which& _internal_which() const;
  ::voice::assistant::Which* _internal_mutable_which();
  public:
  void unsafe_arena_set_allocated_which(
      ::voice::assistant::Which* which);
  ::voice::assistant::Which* unsafe_arena_release_which();

  // @@protoc_insertion_point(class_scope:voice.assistant.Slots)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::voice::assistant::What* what_;
  ::voice::assistant::Which* which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// -------------------------------------------------------------------

class What PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.What) */ {
 public:
  inline What() : What(nullptr) {};
  virtual ~What();

  What(const What& from);
  What(What&& from) noexcept
    : What() {
    *this = ::std::move(from);
  }

  inline What& operator=(const What& from) {
    CopyFrom(from);
    return *this;
  }
  inline What& operator=(What&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const What& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const What* internal_default_instance() {
    return reinterpret_cast<const What*>(
               &_What_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(What& a, What& b) {
    a.Swap(&b);
  }
  inline void Swap(What* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(What* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline What* New() const final {
    return CreateMaybeMessage<What>(nullptr);
  }

  What* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<What>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const What& from);
  void MergeFrom(const What& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(What* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.What";
  }
  protected:
  explicit What(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:voice.assistant.What)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// -------------------------------------------------------------------

class Which PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.Which) */ {
 public:
  inline Which() : Which(nullptr) {};
  virtual ~Which();

  Which(const Which& from);
  Which(Which&& from) noexcept
    : Which() {
    *this = ::std::move(from);
  }

  inline Which& operator=(const Which& from) {
    CopyFrom(from);
    return *this;
  }
  inline Which& operator=(Which&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Which& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Which* internal_default_instance() {
    return reinterpret_cast<const Which*>(
               &_Which_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Which& a, Which& b) {
    a.Swap(&b);
  }
  inline void Swap(Which* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Which* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Which* New() const final {
    return CreateMaybeMessage<Which>(nullptr);
  }

  Which* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Which>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Which& from);
  void MergeFrom(const Which& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Which* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.Which";
  }
  protected:
  explicit Which(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:voice.assistant.Which)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voice.assistant.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voice.assistant.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2dassistant_2eproto);
    return ::descriptor_table_voice_2dassistant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOutputFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string output = 3;
  void clear_output();
  const std::string& output() const;
  void set_output(const std::string& value);
  void set_output(std::string&& value);
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  std::string* mutable_output();
  std::string* release_output();
  void set_allocated_output(std::string* output);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output(
      std::string* output);
  private:
  const std::string& _internal_output() const;
  void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // uint32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:voice.assistant.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2dassistant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string command = 1;
inline void Request::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::command() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Request.command)
  return _internal_command();
}
inline void Request::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:voice.assistant.Request.command)
}
inline std::string* Request::mutable_command() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Request.command)
  return _internal_mutable_command();
}
inline const std::string& Request::_internal_command() const {
  return command_.Get();
}
inline void Request::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voice.assistant.Request.command)
}
inline void Request::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voice.assistant.Request.command)
}
inline void Request::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voice.assistant.Request.command)
}
inline std::string* Request::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_command() {
  // @@protoc_insertion_point(field_release:voice.assistant.Request.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Request.command)
}
inline std::string* Request::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voice.assistant.Request.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Request.command)
}

// .voice.assistant.Nlu nlu = 2;
inline bool Request::_internal_has_nlu() const {
  return this != internal_default_instance() && nlu_ != nullptr;
}
inline bool Request::has_nlu() const {
  return _internal_has_nlu();
}
inline void Request::clear_nlu() {
  if (GetArena() == nullptr && nlu_ != nullptr) {
    delete nlu_;
  }
  nlu_ = nullptr;
}
inline const ::voice::assistant::Nlu& Request::_internal_nlu() const {
  const ::voice::assistant::Nlu* p = nlu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::voice::assistant::Nlu*>(
      &::voice::assistant::_Nlu_default_instance_);
}
inline const ::voice::assistant::Nlu& Request::nlu() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Request.nlu)
  return _internal_nlu();
}
inline void Request::unsafe_arena_set_allocated_nlu(
    ::voice::assistant::Nlu* nlu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlu_);
  }
  nlu_ = nlu;
  if (nlu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Request.nlu)
}
inline ::voice::assistant::Nlu* Request::release_nlu() {
  auto temp = unsafe_arena_release_nlu();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::voice::assistant::Nlu* Request::unsafe_arena_release_nlu() {
  // @@protoc_insertion_point(field_release:voice.assistant.Request.nlu)
  
  ::voice::assistant::Nlu* temp = nlu_;
  nlu_ = nullptr;
  return temp;
}
inline ::voice::assistant::Nlu* Request::_internal_mutable_nlu() {
  
  if (nlu_ == nullptr) {
    auto* p = CreateMaybeMessage<::voice::assistant::Nlu>(GetArena());
    nlu_ = p;
  }
  return nlu_;
}
inline ::voice::assistant::Nlu* Request::mutable_nlu() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Request.nlu)
  return _internal_mutable_nlu();
}
inline void Request::set_allocated_nlu(::voice::assistant::Nlu* nlu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nlu_;
  }
  if (nlu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nlu);
    if (message_arena != submessage_arena) {
      nlu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nlu, submessage_arena);
    }
    
  } else {
    
  }
  nlu_ = nlu;
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Request.nlu)
}

// -------------------------------------------------------------------

// Nlu

// .voice.assistant.Intents intents = 1;
inline bool Nlu::_internal_has_intents() const {
  return this != internal_default_instance() && intents_ != nullptr;
}
inline bool Nlu::has_intents() const {
  return _internal_has_intents();
}
inline void Nlu::clear_intents() {
  if (GetArena() == nullptr && intents_ != nullptr) {
    delete intents_;
  }
  intents_ = nullptr;
}
inline const ::voice::assistant::Intents& Nlu::_internal_intents() const {
  const ::voice::assistant::Intents* p = intents_;
  return p != nullptr ? *p : *reinterpret_cast<const ::voice::assistant::Intents*>(
      &::voice::assistant::_Intents_default_instance_);
}
inline const ::voice::assistant::Intents& Nlu::intents() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Nlu.intents)
  return _internal_intents();
}
inline void Nlu::unsafe_arena_set_allocated_intents(
    ::voice::assistant::Intents* intents) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intents_);
  }
  intents_ = intents;
  if (intents) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Nlu.intents)
}
inline ::voice::assistant::Intents* Nlu::release_intents() {
  auto temp = unsafe_arena_release_intents();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::voice::assistant::Intents* Nlu::unsafe_arena_release_intents() {
  // @@protoc_insertion_point(field_release:voice.assistant.Nlu.intents)
  
  ::voice::assistant::Intents* temp = intents_;
  intents_ = nullptr;
  return temp;
}
inline ::voice::assistant::Intents* Nlu::_internal_mutable_intents() {
  
  if (intents_ == nullptr) {
    auto* p = CreateMaybeMessage<::voice::assistant::Intents>(GetArena());
    intents_ = p;
  }
  return intents_;
}
inline ::voice::assistant::Intents* Nlu::mutable_intents() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Nlu.intents)
  return _internal_mutable_intents();
}
inline void Nlu::set_allocated_intents(::voice::assistant::Intents* intents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intents_;
  }
  if (intents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intents);
    if (message_arena != submessage_arena) {
      intents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intents, submessage_arena);
    }
    
  } else {
    
  }
  intents_ = intents;
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Nlu.intents)
}

// -------------------------------------------------------------------

// Intents

// .voice.assistant.Clone clone = 1;
inline bool Intents::_internal_has_clone() const {
  return this != internal_default_instance() && clone_ != nullptr;
}
inline bool Intents::has_clone() const {
  return _internal_has_clone();
}
inline void Intents::clear_clone() {
  if (GetArena() == nullptr && clone_ != nullptr) {
    delete clone_;
  }
  clone_ = nullptr;
}
inline const ::voice::assistant::Clone& Intents::_internal_clone() const {
  const ::voice::assistant::Clone* p = clone_;
  return p != nullptr ? *p : *reinterpret_cast<const ::voice::assistant::Clone*>(
      &::voice::assistant::_Clone_default_instance_);
}
inline const ::voice::assistant::Clone& Intents::clone() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Intents.clone)
  return _internal_clone();
}
inline void Intents::unsafe_arena_set_allocated_clone(
    ::voice::assistant::Clone* clone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clone_);
  }
  clone_ = clone;
  if (clone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Intents.clone)
}
inline ::voice::assistant::Clone* Intents::release_clone() {
  auto temp = unsafe_arena_release_clone();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::voice::assistant::Clone* Intents::unsafe_arena_release_clone() {
  // @@protoc_insertion_point(field_release:voice.assistant.Intents.clone)
  
  ::voice::assistant::Clone* temp = clone_;
  clone_ = nullptr;
  return temp;
}
inline ::voice::assistant::Clone* Intents::_internal_mutable_clone() {
  
  if (clone_ == nullptr) {
    auto* p = CreateMaybeMessage<::voice::assistant::Clone>(GetArena());
    clone_ = p;
  }
  return clone_;
}
inline ::voice::assistant::Clone* Intents::mutable_clone() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Intents.clone)
  return _internal_mutable_clone();
}
inline void Intents::set_allocated_clone(::voice::assistant::Clone* clone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clone_;
  }
  if (clone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clone);
    if (message_arena != submessage_arena) {
      clone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clone, submessage_arena);
    }
    
  } else {
    
  }
  clone_ = clone;
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Intents.clone)
}

// -------------------------------------------------------------------

// Clone

// .voice.assistant.Slots slots = 1;
inline bool Clone::_internal_has_slots() const {
  return this != internal_default_instance() && slots_ != nullptr;
}
inline bool Clone::has_slots() const {
  return _internal_has_slots();
}
inline void Clone::clear_slots() {
  if (GetArena() == nullptr && slots_ != nullptr) {
    delete slots_;
  }
  slots_ = nullptr;
}
inline const ::voice::assistant::Slots& Clone::_internal_slots() const {
  const ::voice::assistant::Slots* p = slots_;
  return p != nullptr ? *p : *reinterpret_cast<const ::voice::assistant::Slots*>(
      &::voice::assistant::_Slots_default_instance_);
}
inline const ::voice::assistant::Slots& Clone::slots() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Clone.slots)
  return _internal_slots();
}
inline void Clone::unsafe_arena_set_allocated_slots(
    ::voice::assistant::Slots* slots) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slots_);
  }
  slots_ = slots;
  if (slots) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Clone.slots)
}
inline ::voice::assistant::Slots* Clone::release_slots() {
  auto temp = unsafe_arena_release_slots();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::voice::assistant::Slots* Clone::unsafe_arena_release_slots() {
  // @@protoc_insertion_point(field_release:voice.assistant.Clone.slots)
  
  ::voice::assistant::Slots* temp = slots_;
  slots_ = nullptr;
  return temp;
}
inline ::voice::assistant::Slots* Clone::_internal_mutable_slots() {
  
  if (slots_ == nullptr) {
    auto* p = CreateMaybeMessage<::voice::assistant::Slots>(GetArena());
    slots_ = p;
  }
  return slots_;
}
inline ::voice::assistant::Slots* Clone::mutable_slots() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Clone.slots)
  return _internal_mutable_slots();
}
inline void Clone::set_allocated_slots(::voice::assistant::Slots* slots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete slots_;
  }
  if (slots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slots);
    if (message_arena != submessage_arena) {
      slots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slots, submessage_arena);
    }
    
  } else {
    
  }
  slots_ = slots;
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Clone.slots)
}

// -------------------------------------------------------------------

// Slots

// .voice.assistant.What what = 1;
inline bool Slots::_internal_has_what() const {
  return this != internal_default_instance() && what_ != nullptr;
}
inline bool Slots::has_what() const {
  return _internal_has_what();
}
inline void Slots::clear_what() {
  if (GetArena() == nullptr && what_ != nullptr) {
    delete what_;
  }
  what_ = nullptr;
}
inline const ::voice::assistant::What& Slots::_internal_what() const {
  const ::voice::assistant::What* p = what_;
  return p != nullptr ? *p : *reinterpret_cast<const ::voice::assistant::What*>(
      &::voice::assistant::_What_default_instance_);
}
inline const ::voice::assistant::What& Slots::what() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Slots.what)
  return _internal_what();
}
inline void Slots::unsafe_arena_set_allocated_what(
    ::voice::assistant::What* what) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(what_);
  }
  what_ = what;
  if (what) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Slots.what)
}
inline ::voice::assistant::What* Slots::release_what() {
  auto temp = unsafe_arena_release_what();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::voice::assistant::What* Slots::unsafe_arena_release_what() {
  // @@protoc_insertion_point(field_release:voice.assistant.Slots.what)
  
  ::voice::assistant::What* temp = what_;
  what_ = nullptr;
  return temp;
}
inline ::voice::assistant::What* Slots::_internal_mutable_what() {
  
  if (what_ == nullptr) {
    auto* p = CreateMaybeMessage<::voice::assistant::What>(GetArena());
    what_ = p;
  }
  return what_;
}
inline ::voice::assistant::What* Slots::mutable_what() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Slots.what)
  return _internal_mutable_what();
}
inline void Slots::set_allocated_what(::voice::assistant::What* what) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete what_;
  }
  if (what) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(what);
    if (message_arena != submessage_arena) {
      what = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, what, submessage_arena);
    }
    
  } else {
    
  }
  what_ = what;
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Slots.what)
}

// .voice.assistant.Which which = 2;
inline bool Slots::_internal_has_which() const {
  return this != internal_default_instance() && which_ != nullptr;
}
inline bool Slots::has_which() const {
  return _internal_has_which();
}
inline void Slots::clear_which() {
  if (GetArena() == nullptr && which_ != nullptr) {
    delete which_;
  }
  which_ = nullptr;
}
inline const ::voice::assistant::Which& Slots::_internal_which() const {
  const ::voice::assistant::Which* p = which_;
  return p != nullptr ? *p : *reinterpret_cast<const ::voice::assistant::Which*>(
      &::voice::assistant::_Which_default_instance_);
}
inline const ::voice::assistant::Which& Slots::which() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Slots.which)
  return _internal_which();
}
inline void Slots::unsafe_arena_set_allocated_which(
    ::voice::assistant::Which* which) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(which_);
  }
  which_ = which;
  if (which) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Slots.which)
}
inline ::voice::assistant::Which* Slots::release_which() {
  auto temp = unsafe_arena_release_which();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::voice::assistant::Which* Slots::unsafe_arena_release_which() {
  // @@protoc_insertion_point(field_release:voice.assistant.Slots.which)
  
  ::voice::assistant::Which* temp = which_;
  which_ = nullptr;
  return temp;
}
inline ::voice::assistant::Which* Slots::_internal_mutable_which() {
  
  if (which_ == nullptr) {
    auto* p = CreateMaybeMessage<::voice::assistant::Which>(GetArena());
    which_ = p;
  }
  return which_;
}
inline ::voice::assistant::Which* Slots::mutable_which() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Slots.which)
  return _internal_mutable_which();
}
inline void Slots::set_allocated_which(::voice::assistant::Which* which) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete which_;
  }
  if (which) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(which);
    if (message_arena != submessage_arena) {
      which = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, which, submessage_arena);
    }
    
  } else {
    
  }
  which_ = which;
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Slots.which)
}

// -------------------------------------------------------------------

// What

// string type = 1;
inline void What::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& What::type() const {
  // @@protoc_insertion_point(field_get:voice.assistant.What.type)
  return _internal_type();
}
inline void What::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:voice.assistant.What.type)
}
inline std::string* What::mutable_type() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.What.type)
  return _internal_mutable_type();
}
inline const std::string& What::_internal_type() const {
  return type_.Get();
}
inline void What::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void What::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voice.assistant.What.type)
}
inline void What::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voice.assistant.What.type)
}
inline void What::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voice.assistant.What.type)
}
inline std::string* What::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* What::release_type() {
  // @@protoc_insertion_point(field_release:voice.assistant.What.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void What::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.What.type)
}
inline std::string* What::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voice.assistant.What.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void What::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.What.type)
}

// string value = 2;
inline void What::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& What::value() const {
  // @@protoc_insertion_point(field_get:voice.assistant.What.value)
  return _internal_value();
}
inline void What::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:voice.assistant.What.value)
}
inline std::string* What::mutable_value() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.What.value)
  return _internal_mutable_value();
}
inline const std::string& What::_internal_value() const {
  return value_.Get();
}
inline void What::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void What::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voice.assistant.What.value)
}
inline void What::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voice.assistant.What.value)
}
inline void What::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voice.assistant.What.value)
}
inline std::string* What::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* What::release_value() {
  // @@protoc_insertion_point(field_release:voice.assistant.What.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void What::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.What.value)
}
inline std::string* What::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voice.assistant.What.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void What::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.What.value)
}

// -------------------------------------------------------------------

// Which

// string type = 1;
inline void Which::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Which::type() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Which.type)
  return _internal_type();
}
inline void Which::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:voice.assistant.Which.type)
}
inline std::string* Which::mutable_type() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Which.type)
  return _internal_mutable_type();
}
inline const std::string& Which::_internal_type() const {
  return type_.Get();
}
inline void Which::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Which::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voice.assistant.Which.type)
}
inline void Which::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voice.assistant.Which.type)
}
inline void Which::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voice.assistant.Which.type)
}
inline std::string* Which::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Which::release_type() {
  // @@protoc_insertion_point(field_release:voice.assistant.Which.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Which::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Which.type)
}
inline std::string* Which::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voice.assistant.Which.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Which::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Which.type)
}

// string value = 2;
inline void Which::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Which::value() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Which.value)
  return _internal_value();
}
inline void Which::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:voice.assistant.Which.value)
}
inline std::string* Which::mutable_value() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Which.value)
  return _internal_mutable_value();
}
inline const std::string& Which::_internal_value() const {
  return value_.Get();
}
inline void Which::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Which::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voice.assistant.Which.value)
}
inline void Which::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voice.assistant.Which.value)
}
inline void Which::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voice.assistant.Which.value)
}
inline std::string* Which::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Which::release_value() {
  // @@protoc_insertion_point(field_release:voice.assistant.Which.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Which::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Which.value)
}
inline std::string* Which::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voice.assistant.Which.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Which::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Which.value)
}

// -------------------------------------------------------------------

// Response

// uint32 code = 1;
inline void Response::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::code() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Response.code)
  return _internal_code();
}
inline void Response::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void Response::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:voice.assistant.Response.code)
}

// string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Response.message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:voice.assistant.Response.message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Response.message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voice.assistant.Response.message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voice.assistant.Response.message)
}
inline void Response::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voice.assistant.Response.message)
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:voice.assistant.Response.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Response.message)
}
inline std::string* Response::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voice.assistant.Response.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Response.message)
}

// string output = 3;
inline void Response::clear_output() {
  output_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::output() const {
  // @@protoc_insertion_point(field_get:voice.assistant.Response.output)
  return _internal_output();
}
inline void Response::set_output(const std::string& value) {
  _internal_set_output(value);
  // @@protoc_insertion_point(field_set:voice.assistant.Response.output)
}
inline std::string* Response::mutable_output() {
  // @@protoc_insertion_point(field_mutable:voice.assistant.Response.output)
  return _internal_mutable_output();
}
inline const std::string& Response::_internal_output() const {
  return output_.Get();
}
inline void Response::_internal_set_output(const std::string& value) {
  
  output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_output(std::string&& value) {
  
  output_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:voice.assistant.Response.output)
}
inline void Response::set_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:voice.assistant.Response.output)
}
inline void Response::set_output(const char* value,
    size_t size) {
  
  output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:voice.assistant.Response.output)
}
inline std::string* Response::_internal_mutable_output() {
  
  return output_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_output() {
  // @@protoc_insertion_point(field_release:voice.assistant.Response.output)
  return output_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:voice.assistant.Response.output)
}
inline std::string* Response::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_unsafe_arena_release:voice.assistant.Response.output)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return output_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_output(
    std::string* output) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output != nullptr) {
    
  } else {
    
  }
  output_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:voice.assistant.Response.output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace assistant
}  // namespace voice

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_voice_2dassistant_2eproto
